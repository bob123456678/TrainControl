/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package gui;

import base.Locomotive;
import java.awt.Image;
import java.util.ArrayList;
import java.util.List;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import marklin.MarklinLocomotive;

/**
 * UI for changing locomotive functions
 */
public class LocomotiveFunctionAssign extends javax.swing.JPanel {

    MarklinLocomotive loc;
    TrainControlUI parent;
    
    /**
     * Creates new form LocomotiveFunctionAssign
     * @param l
     * @param parent
     * @param functionIndex // function to start at
     * @param standalone
     */
    public LocomotiveFunctionAssign(Locomotive l, TrainControlUI parent, int functionIndex, boolean standalone)
    {
        this.loc = (MarklinLocomotive) l;
        this.parent = parent;
        initComponents();
        
        // Dynamically set number of selectable functions
        List<String> funcModel = new ArrayList<>();
        List<Object> iconModel = new ArrayList<>();

        for (int i = 0; i < loc.getNumF(); i++)
        {
            funcModel.add(Integer.toString(i));
        }

        for (int i = 0; i <= MarklinLocomotive.NUM_FN_ICONS; i++)
        {
            try
            {
                String targetURL = loc.getFunctionIconUrl(i, false, true);
                Image icon = parent.getLocImage(targetURL, 35);
                iconModel.add(new ImageIcon(icon));
            }
            catch (Exception e)
            {
                iconModel.add(Integer.toString(i));
                this.parent.getModel().log("Error loading function icon " + i);
            }
        }

        fNo.setModel(
            new javax.swing.DefaultComboBoxModel<>(funcModel.toArray(new String[0])) 
        );

        fIcon.setModel(
            new javax.swing.DefaultComboBoxModel(iconModel.toArray(new Object[0])) 
        );
        
        // Display current icon
        fNoItemStateChanged(null);
        
        // Snap to a specific function
        if (functionIndex < fNo.getModel().getSize())
        {
            fNo.setSelectedIndex(functionIndex);
        }
        
        if (standalone)
        {
            this.applyButton.setVisible(false);
            this.jSeparator1.setVisible(false);
            this.fNo.setVisible(false);
            this.fNoLabel.setVisible(false);
            this.fIconlabel.setText("Function " + functionIndex + " Icon");
        }
        else
        {
            this.applyButton.setVisible(true);
            this.jSeparator1.setVisible(true);
            this.fNo.setVisible(true);
            this.fNoLabel.setVisible(true);
            this.fIconlabel.setText("Function Icon");
        }
    }
    
    public void focusFno()
    {
        this.fNo.requestFocus();
    }
    
    public void focusImages()
    {
        this.fIcon.requestFocus();
    }
    
    /**
     * External call to apply shown values
     */
    public void doApply()
    {
        applyButtonActionPerformed(null);
    }
    
    public Integer getFIcon()
    {
        return this.fIcon.getSelectedIndex();
    }
    
    public Integer getFNo()
    {
        return this.fNo.getSelectedIndex();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fNoLabel = new javax.swing.JLabel();
        fNo = new javax.swing.JComboBox<>();
        fIcon = new javax.swing.JComboBox<>();
        fIconlabel = new javax.swing.JLabel();
        applyButton = new javax.swing.JButton();
        resetButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        fIconlabel1 = new javax.swing.JLabel();
        functionTriggerType = new javax.swing.JComboBox<>();

        setMinimumSize(new java.awt.Dimension(213, 97));

        fNoLabel.setForeground(new java.awt.Color(0, 0, 115));
        fNoLabel.setText("Function Number");

        fNo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        fNo.setMinimumSize(new java.awt.Dimension(100, 27));
        fNo.setPreferredSize(new java.awt.Dimension(100, 27));
        fNo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                fNoItemStateChanged(evt);
            }
        });

        fIcon.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        fIcon.setMinimumSize(new java.awt.Dimension(100, 27));
        fIcon.setPreferredSize(new java.awt.Dimension(100, 27));

        fIconlabel.setForeground(new java.awt.Color(0, 0, 115));
        fIconlabel.setText("Function Icon");

        applyButton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        applyButton.setText("Apply");
        applyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                applyButtonActionPerformed(evt);
            }
        });

        resetButton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        resetButton.setText("Reset Customizations");
        resetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButtonActionPerformed(evt);
            }
        });

        fIconlabel1.setForeground(new java.awt.Color(0, 0, 115));
        fIconlabel1.setText("Duration");

        functionTriggerType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Toggle", "Momentary", "1s", "2s", "3s", "4s", "5s", "6s", "7s", "8s", "9s", "10s", "11s", "12s", "13s", "14s", "15s", "16s", "17s", "18s", "19s", "20s", "21s", "22s", "23s", "24s", "25s", "26s", "27s", "28s", "29s", "30s" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(resetButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(applyButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(fIconlabel)
                            .addComponent(fNoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(fNo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(fIcon, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(fIconlabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(functionTriggerType, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(14, 14, 14))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fNoLabel)
                    .addComponent(fNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fIcon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fIconlabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fIconlabel1)
                    .addComponent(functionTriggerType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(applyButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(13, 13, 13)
                .addComponent(resetButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void applyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_applyButtonActionPerformed
       
        int fTriggerType;
        if (this.functionTriggerType.getSelectedIndex() == 0)
        {
            fTriggerType = Locomotive.FUNCTION_TOGGLE;
        }
        else if (this.functionTriggerType.getSelectedIndex() == 1)
        {
            fTriggerType = Locomotive.FUNCTION_PULSE;
        }
        else
        {
            fTriggerType = this.functionTriggerType.getSelectedIndex() - 1;
        } 
        
        loc.setFunctionType(getFNo(), getFIcon(), fTriggerType);
        parent.repaintLoc(true);
            
        this.fNo.setSelectedIndex((this.fNo.getSelectedIndex() + 1) % this.fNo.getItemCount());  
    }//GEN-LAST:event_applyButtonActionPerformed

    private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetButtonActionPerformed
        int dialogResult = JOptionPane.showConfirmDialog(
                this, "Do you want to reset the functions to the Central Station's settings?" ,"Confirm Reset", JOptionPane.YES_NO_OPTION
            );
            
        if (dialogResult == JOptionPane.YES_OPTION)
        {
            javax.swing.SwingUtilities.invokeLater(new Thread(() -> 
            {
                this.loc.setCustomFunctions(false);
                this.parent.getModel().syncWithCS2();
                this.parent.repaintLoc(true);
            }));
        }
    }//GEN-LAST:event_resetButtonActionPerformed

    private void fNoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_fNoItemStateChanged
        
        int fNo = this.fNo.getSelectedIndex();

        this.fIcon.setSelectedIndex(MarklinLocomotive.sanitizeFIconIndex(this.loc.getFunctionType(fNo)));
        
        
        if (loc.isFunctionTimed(fNo) > 0)
        {
            this.functionTriggerType.setSelectedIndex(Math.min(loc.isFunctionTimed(fNo) + 1, this.functionTriggerType.getItemCount() - 1));
        }
        else if (loc.isFunctionPulse(fNo))
        {
            this.functionTriggerType.setSelectedIndex(1);
        }
        else
        {
            this.functionTriggerType.setSelectedIndex(0);
        }        
    }//GEN-LAST:event_fNoItemStateChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton applyButton;
    private javax.swing.JComboBox<String> fIcon;
    private javax.swing.JLabel fIconlabel;
    private javax.swing.JLabel fIconlabel1;
    private javax.swing.JComboBox<String> fNo;
    private javax.swing.JLabel fNoLabel;
    private javax.swing.JComboBox<String> functionTriggerType;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JButton resetButton;
    // End of variables declaration//GEN-END:variables
}
