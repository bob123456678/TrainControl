/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

package gui;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.util.Map;
import java.util.TreeMap;
import javax.swing.JComponent;
import util.Conversion;

/**
 * A basic locomotive usage graph
 */
public class UsageHistogram extends javax.swing.JFrame
{
    TrainControlUI tcui;
    
    /** Creates new form UsageHistogram
     * @param tcui 
     */
    public UsageHistogram(TrainControlUI tcui)
    {
        initComponents();
        this.tcui = tcui;
        this.createHistogramPanel();
    }

    private void createHistogramPanel()
    {
        // Example data: Replace with your actual data (dates and values)
        TreeMap<String, Long> data = tcui.getModel().getDailyRuntimeStats(30);
        TreeMap<String, Integer> dataLocs = tcui.getModel().getDailyCountStats(30);
                
        setLayout(new BorderLayout());

        // Create a custom component for drawing the histogram
        JComponent histogramComponent = new JComponent()
        {
            @Override
            protected void paintComponent(Graphics g)
            {
                super.paintComponent(g);

                // Set up drawing parameters (adjust as needed)
                int barWidth = 20;
                int barHeight = 130;
                int x = 30;
                int y = 200;
                
                // Draw a white background for the chart rectangle
                g.setColor(Color.WHITE);
                g.fillRect(x - 3, y - 150 - 20, 930 - x, 150 + 20); // Adjust dimensions as needed
                
                double maxVal = 0;
                
                for (Map.Entry<String, Long> entry : data.entrySet())
                {
                    if (entry.getValue() > maxVal)
                    {
                        maxVal = entry.getValue();
                    }
                }

                for (Map.Entry<String, Long> entry : data.entrySet())
                {
                    String date = entry.getKey();
                    double value = 0;

                    // Our main stats
                    Integer locCount = dataLocs.getOrDefault(date, 0);

                    String hours = Conversion.convertSecondsToHMm(entry.getValue());

                    if (maxVal > 0)
                    {
                        value = barHeight * (entry.getValue() / maxVal);
                    }

                    // Draw a bar for each data point
                    g.setColor(Color.BLUE);
                    g.fillRect(x + 4, y - (int) value, barWidth, (int) value);

                    // Draw date labels
                    g.setColor(Color.BLACK);
                    Graphics2D g2d = (Graphics2D) g;
                    g2d.rotate(Math.toRadians(270), x + barWidth / 2.0 + 8, y + 63);
                    g2d.drawString(date, x + 8, y + 63);
                    g2d.rotate(-Math.toRadians(270), x + barWidth / 2.0 + 8, y + 63);

                    // Draw value labels
                    if (entry.getValue() > 0)
                    {
                        g.setColor(Color.BLACK);
                        g.drawString(hours, x + barWidth / 2 - 9, y - (int) value - 5);

                        // Locomotive counts
                        g.drawString(String.valueOf("(" + locCount + ")"), x + barWidth / 2 - 6, y - (int) value - 25);
                    }  
                    
                    // Move to the next position
                    x += barWidth + 10;
                }
                
                // Draw a 1-pixel border around the entire chart
                g.setColor(Color.BLACK);
                g.drawRect(25, 30, x - 30, y - 30);
                
                // Add rotated y-axis label
                g.setColor(Color.BLACK);
                Graphics2D g2d = (Graphics2D) g;
                g2d.rotate(Math.toRadians(270), 17, y / 2 + 65);
                g2d.setFont(g2d.getFont().deriveFont(Font.BOLD)); 
                g2d.drawString("Hours (# Locs)", 32, y / 2 + 65);
                g2d.rotate(-Math.toRadians(270), 17, y / 2 + 65); 
            }
        };

        add(histogramComponent, BorderLayout.CENTER);
        getContentPane().setBackground(new Color(240, 240, 240)); // Set background color

        this.pack();
        this.setVisible(true);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Cumulative Locomotive Runtime - Past 30 Days");
        setBackground(new java.awt.Color(246, 246, 246));
        setIconImage(java.awt.Toolkit.getDefaultToolkit().getImage(TrainControlUI.class.getResource("resources/locicon.png")));
        setMaximumSize(new java.awt.Dimension(960, 330));
        setMinimumSize(new java.awt.Dimension(960, 330));
        setPreferredSize(new java.awt.Dimension(960, 330));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

   

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

}
