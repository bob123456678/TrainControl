/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import automation.Point;
import base.Locomotive;
import java.util.Collections;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Objects;
import java.util.Set;
import javax.swing.DefaultListModel;

/**
 *
 * @author Adam
 */
public class GraphLocExclude extends javax.swing.JPanel {
    TrainControlUI parent;
    Point p;

    /**
     * Creates new form GraphLocAssign
     * @param parent
     * @param p
     */
    public GraphLocExclude(TrainControlUI parent, Point p) {
        initComponents();
        this.parent = parent;
        this.p = p;
        
        if (p.isDestination())
        {
            this.infoLabel.setText("These locomotives will not stop at this station in autonomous operation.");
        }
        else
        {
            this.infoLabel.setText("These locomotives will never be able to traverse this point.");
        }
        
        updateValues();
    }
    
    public final void updateValues()
    {
        // Configure lock edge list
        this.excludedLocList.removeAll();
        DefaultListModel elementList = new DefaultListModel();
        
        List<String> locNames = new LinkedList<>();

        for (Locomotive l : this.parent.getModel().getLocomotives())
        {
            locNames.add(l.getName());
        }

        Collections.sort(locNames);
        
        List<Integer> selected = new LinkedList<>();

        for (String s : locNames)
        {   
            // Store index of current lock edges
            if (p.getExcludedLocs().contains((Locomotive) parent.getModel().getLocByName(s)))
            {
                selected.add(elementList.size());
            }
            
            elementList.addElement(s);
        }
        
        this.excludedLocList.setModel(elementList);
                
        this.excludedLocList.setSelectedIndices(selected.stream()
                    .filter(Objects::nonNull)
                    .mapToInt(Integer::intValue)
                    .toArray());
        
        
    }
   
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        excludedLocList = new javax.swing.JList<>();
        excludeLocLabel = new javax.swing.JLabel();
        infoLabel = new javax.swing.JLabel();

        excludedLocList.setBackground(new java.awt.Color(254, 254, 254));
        excludedLocList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(excludedLocList);

        excludeLocLabel.setForeground(new java.awt.Color(0, 0, 115));
        excludeLocLabel.setText("Excluded Locomotives");

        infoLabel.setText("These locomotives will not stop at this station in autonomous operation.");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(excludeLocLabel)
                            .addComponent(infoLabel))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(excludeLocLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(infoLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 397, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Returns the set of selected locomotives
     * @return 
     */
    public Set<Locomotive> getSelectedExcludeLocs()
    {
        Set<Locomotive> output = new HashSet<>();
        
        for (String s : this.excludedLocList.getSelectedValuesList())
        {
            if (this.parent.getModel().getLocByName(s) != null)
            {
                output.add((Locomotive) this.parent.getModel().getLocByName(s));
            }
        }
        
        return output;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel excludeLocLabel;
    private javax.swing.JList<String> excludedLocList;
    private javax.swing.JLabel infoLabel;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
