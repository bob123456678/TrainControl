/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import automation.Edge;
import base.Accessory;
import java.util.Collections;
import java.util.LinkedList;
import java.util.List;
import java.util.Map.Entry;
import java.util.Objects;
import javax.swing.DefaultListModel;

/**
 *
 * @author Adam
 */
public class GraphEdgeEdit extends javax.swing.JPanel {
    TrainControlUI parent;
    Edge e;

    /**
     * Creates new form GraphLocAssign
     * @param parent
     * @param e
     */
    public GraphEdgeEdit(TrainControlUI parent, Edge e) {
        initComponents();
        this.parent = parent;
        this.e = e;
        
        updateValues();
    }
    
    public final void updateValues()
    {
        // Configure lock edge list
        this.lockEdges.removeAll();
        DefaultListModel elementList = new DefaultListModel();
        
        List<String> edgeNames = new LinkedList<>();

        for (Edge e2 : parent.getModel().getAutoLayout().getEdges())
        {
            edgeNames.add(e2.getName());
        }

        Collections.sort(edgeNames);
        
        List<Integer> selected = new LinkedList<>();

        for (String s : edgeNames)
        {
            // Shouldn't be a lock edge with itself
            if (s.equals(e.getName())) continue;
            
            // Store index of current lock edges
            if (e.getLockEdges().contains(parent.getModel().getAutoLayout().getEdge(s)))
            {
                selected.add(elementList.size());
            }
            
            elementList.addElement(s);
        }
        
        this.lockEdges.setModel(elementList);
                
        this.lockEdges.setSelectedIndices(selected.stream()
                    .filter(Objects::nonNull)
                    .mapToInt(Integer::intValue)
                    .toArray());
        
        // Populate command list
        String config = "";

        for (Entry<String, Accessory.accessorySetting> command : e.getConfigCommands().entrySet())
        {
            config += command.getKey() + "," + command.getValue().toString().toLowerCase() + "\n";
        }
        
        if (e.getLength() < this.edgeLength.getItemCount())
        {
            this.edgeLength.setSelectedIndex(e.getLength());
        }
        else
        {
            this.edgeLength.setSelectedIndex(this.edgeLength.getItemCount() - 1);
        } 
        
        this.configCommands.setText(config.trim());
        
        // Preview lock edges on the graph
        this.updateUILockedEdges();
    }
    
    /**
     * Applies the lock edge selections and length from the UI
     */
    public void applyLockEdges()
    {
        List<String> selectedLockEdges = this.lockEdges.getSelectedValuesList();
        
        e.clearLockEdges();
        
        for (String edge : selectedLockEdges)
        {
            e.addLockEdge(parent.getModel().getAutoLayout().getEdge(edge));
        }
        
        e.setLength(this.edgeLength.getSelectedIndex());
        
        // Reset highlighed lock edges
        this.parent.highlightLockedEdges(null, null);
    }
    
    /**
     * Applies configuration commands as specified in the UI
     * @throws java.lang.Exception
     */
    public void validateAndApplyConfigCommands() throws Exception
    {
        String[] commands = this.configCommands.getText().split("\n");
        
        for (String s : commands)
        {
            if (s.split(",").length == 2)
            {
                String command = s.split(",")[0].trim();
                String setting = s.split(",")[1].trim();
                
                e.validateConfigCommand(command, setting, parent.getModel());
            }
            else if (s.trim().length() > 0)
            {
                // Reset highlighed lock edges
                this.parent.highlightLockedEdges(null, null);
                
                throw new Exception("Command " + s + " must be comma-separated. Example: Signal 1,turn");
            }
        }
        
        e.clearAllConfigCommands();
        
        for (String s : commands)
        {
            if (s.split(",").length == 2)
            {
                String command = s.split(",")[0].trim();
                String setting = s.split(",")[1].trim();
                
                e.addConfigCommand(command, Accessory.stringToAccessorySetting(setting));     
            }
        }   
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        arrivalFuncLabel = new javax.swing.JLabel();
        departureFuncLabel = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        configCommands = new javax.swing.JTextArea();
        jScrollPane1 = new javax.swing.JScrollPane();
        lockEdges = new javax.swing.JList<>();
        departureFuncLabel1 = new javax.swing.JLabel();
        edgeLength = new javax.swing.JComboBox<>();

        arrivalFuncLabel.setForeground(new java.awt.Color(0, 0, 115));
        arrivalFuncLabel.setText("Signal/Switch Commands");

        departureFuncLabel.setForeground(new java.awt.Color(0, 0, 115));
        departureFuncLabel.setText("Edge Length");

        configCommands.setColumns(10);
        configCommands.setRows(5);
        configCommands.setToolTipText("Format: Signal 1,red/green or Switch 2,turn/straight");
        jScrollPane2.setViewportView(configCommands);

        lockEdges.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        lockEdges.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lockEdgesMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(lockEdges);

        departureFuncLabel1.setForeground(new java.awt.Color(0, 0, 115));
        departureFuncLabel1.setText("Lock Edges");

        edgeLength.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20" }));
        edgeLength.setFocusable(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(departureFuncLabel)
                        .addGap(32, 32, 32)
                        .addComponent(edgeLength, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(arrivalFuncLabel)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 271, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(departureFuncLabel1)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(arrivalFuncLabel)
                    .addComponent(departureFuncLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 391, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(departureFuncLabel)
                            .addComponent(edgeLength, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void lockEdgesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lockEdgesMouseClicked
        this.updateUILockedEdges();
    }//GEN-LAST:event_lockEdgesMouseClicked

    /**
     * Updates the lock edges shown on the graph for easier editing
     */
    private void updateUILockedEdges()
    {
        List<Edge> selectedLockEdges = new LinkedList<>();
        
        for (String edge : this.lockEdges.getSelectedValuesList())
        {
            selectedLockEdges.add(parent.getModel().getAutoLayout().getEdge(edge));
        }
        
        this.parent.highlightLockedEdges(e, selectedLockEdges);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel arrivalFuncLabel;
    private javax.swing.JTextArea configCommands;
    private javax.swing.JLabel departureFuncLabel;
    private javax.swing.JLabel departureFuncLabel1;
    private javax.swing.JComboBox<String> edgeLength;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList<String> lockEdges;
    // End of variables declaration//GEN-END:variables
}
