/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package gui;

import base.Locomotive;
import java.awt.HeadlessException;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.text.SimpleDateFormat;
import java.time.Instant;
import java.util.ArrayList;
import java.util.List;
import java.util.Map.Entry;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import marklin.MarklinLocomotive;

/**
 *
 */
public class LocomotiveStats extends javax.swing.JPanel
{
    TrainControlUI tcui;
    
    /**
     * Creates new form LocomotiveStats
     * @param tcui
     */
    public LocomotiveStats(TrainControlUI tcui)
    {
        initComponents();
        this.tcui = tcui;
        
        refresh();
    }
    
    public final void refresh()
    {
        javax.swing.SwingUtilities.invokeLater(new Thread(() ->
        {
            String col[] = {"Locomotive", "Total Runtime", "Last Run", "First Run", "Days Run"};

            DefaultTableModel tableModel = new DefaultTableModel(col, 0);

            List<Locomotive> sortedLocs = new ArrayList();

            for (Locomotive l : tcui.getModel().getLocomotives())
            {
                //if (l.getTotalRuntime() > 0)
                //{
                    sortedLocs.add(l);
                //}
            }

            if (!sortedLocs.isEmpty())
            {               
                sortedLocs.sort((Locomotive l1, Locomotive l2) -> Long.valueOf(l2.getTotalRuntime()).compareTo(l1.getTotalRuntime()));
            }

            for (Locomotive l : sortedLocs)
            {            
                Object[] data = {l.getName(), convertSecondsToHMmSs(l.getTotalRuntime()), l.getOperatingDate(true), l.getOperatingDate(false), l.getNumDaysRun()};

                tableModel.addRow(data);
            }

            this.statsTable.setModel(tableModel);
            this.statsTable.setAutoCreateRowSorter(true);
        }));
    }
    
    private void filterTable()
    {
        String text = this.filterField.getText();
        
        if (text.trim().length() == 0)
        {
            ((TableRowSorter<TableModel>) statsTable.getRowSorter()).setRowFilter(null);
        }
        else
        {
            ((TableRowSorter<TableModel>) statsTable.getRowSorter()).setRowFilter(RowFilter.regexFilter("(?i)" + text));
        }
    }
    
    private String convertSecondsToHMmSs(long ms)
    {
        long seconds = ms / 1000;
        
        long s = seconds % 60;
        long m = (seconds / 60) % 60;
        long h = (seconds / (60 * 60)) % 24;
        
        return String.format("%d:%02d:%02d", h,m,s);
    }
    
    private String convertSecondsToDate(long timestamp)
    {
        if (timestamp == 0) return "Never";
        
        Instant i = Instant.ofEpochMilli( timestamp );
         
        return i.toString().split("T")[0];
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        statsTable = new javax.swing.JTable();
        exportData = new javax.swing.JButton();
        refresh = new javax.swing.JButton();
        filterLabel = new javax.swing.JLabel();
        filterField = new javax.swing.JTextField();

        setBackground(new java.awt.Color(238, 238, 238));
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });

        statsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(statsTable);

        exportData.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        exportData.setText("Export Raw Data");
        exportData.setFocusable(false);
        exportData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportDataActionPerformed(evt);
            }
        });

        refresh.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        refresh.setText("Refresh");
        refresh.setFocusable(false);
        refresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshActionPerformed(evt);
            }
        });

        filterLabel.setForeground(new java.awt.Color(0, 0, 115));
        filterLabel.setText("Filter List:");

        filterField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                filterFieldKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                filterFieldKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 669, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(filterLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(filterField, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(exportData)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(refresh)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 442, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(exportData)
                    .addComponent(refresh)
                    .addComponent(filterLabel)
                    .addComponent(filterField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void exportDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportDataActionPerformed
        this.exportData.setEnabled(false);
        new Thread(() ->
        {
            try
            {
                JFileChooser fc = new JFileChooser(tcui.getPrefs().get(TrainControlUI.LAST_USED_FOLDER, new File(".").getAbsolutePath()));
                fc.setSelectedFile(new File("TC_locstats_" + new SimpleDateFormat("yyyyMMdd_HHmmss").format(System.currentTimeMillis()) + ".txt"));
                int i = fc.showSaveDialog(this);

                if (i == JFileChooser.APPROVE_OPTION)
                {
                    File f = fc.getSelectedFile();
                    
                    String data = "";
                    
                    for (MarklinLocomotive l : this.tcui.getModel().getLocomotives())
                    {
                        for (Entry<String, Long> e : l.getHistoricalOperatingTime().entrySet())
                        {
                            data += "\"" + l.getName() + "\"," + e.getKey() + "," + e.getValue() + "\n";
                        }
                    }

                    Files.write(Paths.get(f.getPath()), data.trim().getBytes());
                    tcui.getPrefs().put(TrainControlUI.LAST_USED_FOLDER, f.getParent());
                }
            }
            catch (HeadlessException | IOException e)
            {
                JOptionPane.showMessageDialog(this, "Error writing file.");

                if (this.tcui.getModel().isDebug())
                {
                    e.printStackTrace();
                }
            }
            
            this.exportData.setEnabled(true);
            this.tcui.resetFocus();
        }).start();
    }//GEN-LAST:event_exportDataActionPerformed

    private void refreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshActionPerformed
        this.refresh();
        this.tcui.resetFocus();
    }//GEN-LAST:event_refreshActionPerformed

    private void filterFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_filterFieldKeyReleased
        filterTable();
    }//GEN-LAST:event_filterFieldKeyReleased

    private void filterFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_filterFieldKeyTyped
        filterTable();
    }//GEN-LAST:event_filterFieldKeyTyped

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        this.tcui.resetFocus();
    }//GEN-LAST:event_formMouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton exportData;
    private javax.swing.JTextField filterField;
    private javax.swing.JLabel filterLabel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton refresh;
    private javax.swing.JTable statsTable;
    // End of variables declaration//GEN-END:variables
}
