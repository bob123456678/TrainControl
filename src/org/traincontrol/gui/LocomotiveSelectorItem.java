package org.traincontrol.gui;

import java.awt.Color;
import java.awt.Font;
import java.util.List;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import org.traincontrol.marklin.MarklinLocomotive;

/**
 *
 * @author Adam
 */
public final class LocomotiveSelectorItem extends javax.swing.JPanel
{    
    private final MarklinLocomotive loc;
    private final LocomotiveSelector selector;
    
    /**
     * Creates new form LocomotiveSelectorItem
     * @param loc
     * @param selector
     */
    public LocomotiveSelectorItem(MarklinLocomotive loc, LocomotiveSelector selector)
    {
        initComponents();
        
        this.loc = loc;
        this.selector = selector;
                
        this.LocLabel.setText(loc.getName());
        this.AddrLabel.setText(loc.getDecoderTypeLabel() + " " + loc.getAddress());
        
        this.refreshToolTip();
                
        // Set icon
        if (TrainControlUI.LOAD_IMAGES && loc.getImageURL() != null && loc.getImageURL().length() > 0)
        {
            this.selector.getUI().getImageLoader().submit(new Thread(() ->
            {
                try 
                {
                    ImageIcon ic = new javax.swing.ImageIcon(
                        this.selector.getUI().getLocImage(loc.getImageURL(), 142)
                    );
                    
                    locIcon.setIcon(ic);      
                    locIcon.setText("");
                }
                catch (Exception e)
                {
                    this.selector.getUI().getModel().log("Failed to load image: " + loc.getImageURL());
                    locIcon.setIcon(null);
                }
            }));
        }
        else
        {
            locIcon.setIcon(null);
        }
    }
    
    /**
     * Makes the tooltip indicate current keyboard mappings
     */
    public void refreshToolTip()
    {
        // Set tooltip and label color
        List<String> mappings = this.selector.getUI().getAllLocButtonMappings(loc);
        if (!mappings.isEmpty())
        {
            locIcon.setToolTipText("Mapped to: " + String.join(", ", mappings));
            
            //this.setBackground(new Color(254, 255, 212));
            this.setBackground(new Color(222,255,222));
         
            // Font font = new Font("Tahoma", Font.BOLD, 17); 
            Font font = new Font("Tahoma", Font.PLAIN, 18); 

            LocLabel.setFont(font);
        }
        else
        {
            locIcon.setToolTipText(null);
            
            this.setBackground(Color.WHITE);
            
            Font font = new Font("Tahoma", Font.PLAIN, 18); 
            LocLabel.setFont(font);
        }
        
        LocLabel.setToolTipText(this.locIcon.getToolTipText());
        AddrLabel.setToolTipText(this.locIcon.getToolTipText());
        this.setToolTipText(this.locIcon.getToolTipText());
    }
    
    public String getText()
    {
        return this.loc.getName();
    }
    
    public String getAddr()
    {
        return Integer.toString(this.loc.getAddress());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        locIcon = new javax.swing.JLabel();
        LocLabel = new javax.swing.JLabel();
        AddrLabel = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));
        setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        setMaximumSize(new java.awt.Dimension(142, 114));
        setMinimumSize(new java.awt.Dimension(142, 114));
        setPreferredSize(new java.awt.Dimension(142, 114));
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                formMouseReleased(evt);
            }
        });

        locIcon.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        locIcon.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                locIconMouseReleased(evt);
            }
        });

        LocLabel.setFont(new java.awt.Font("Segoe UI Semibold", 0, 20)); // NOI18N
        LocLabel.setText("jLabel1");
        LocLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                LocLabelMouseReleased(evt);
            }
        });

        AddrLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        AddrLabel.setForeground(new java.awt.Color(0, 0, 155));
        AddrLabel.setText("jLabel1");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(LocLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(AddrLabel)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addComponent(locIcon, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(locIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(LocLabel)
                .addGap(0, 0, 0)
                .addComponent(AddrLabel)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseReleased
        
        // Right-click menu
        if (evt.getButton() == java.awt.event.MouseEvent.BUTTON3)
        {    
            (new RightClickSelectorMenu(this.selector.getUI(), evt, loc)).show(evt.getComponent(), evt.getX(), evt.getY());
            return;
        }

        if (this.selector.getClickToAssign().isSelected())
        {
            this.selector.getUI().mapLocToCurrentButton(loc.getName());

            this.selector.refreshToolTips();

            if (this.selector.doCloseWindow())
            {
                this.selector.setVisible(false);
            }  
        }
        else
        {
            JOptionPane.showMessageDialog(selector, "Check \"Click to Assign\" to map this locomotive to the active button (" + String.valueOf((char) this.selector.getUI().getKeyForCurrentButton().intValue()) +").");
        }
    }//GEN-LAST:event_formMouseReleased

    private void LocLabelMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LocLabelMouseReleased
        formMouseReleased(evt);
    }//GEN-LAST:event_LocLabelMouseReleased

    private void locIconMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_locIconMouseReleased
        formMouseReleased(evt);
    }//GEN-LAST:event_locIconMouseReleased

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel AddrLabel;
    private javax.swing.JLabel LocLabel;
    private javax.swing.JLabel locIcon;
    // End of variables declaration//GEN-END:variables
}
